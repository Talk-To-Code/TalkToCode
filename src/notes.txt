Speech format:

- Declare variable (C version)
declare <var type> <var name>  - note there is no restriction to var type. since we have structs.
declare <var_type> <var name> equal <var_name>
declare <var_type> <var name> equal <literal>
declare <var_type> <var name> equal <complex fragment>

declare <var_type> array <var name> size <literal>
declare <var_type> array <var name> size <literal> equal make array parameter ... parameter ...

- Declare variable (py version)
<var name> equal <var_name>
<var name> equal <literal>
<var name> equal <complex fragment>

<var name> equal make list parameter ... parameter ...
<var name> equal make dictionary key ... value ... key ... value ...

- Assign variable (c and py version)
<var name> equal <var_name>
<var name> equal <literal>
<var name> equal <complex fragment>
<complex fragment> equal <complex fragment>
<var name> <arithmetic operator> equal <var_name>
<var name> <arithmetic operator> equal <literal>
<var name> <arithmetic operator> equal <complex fragment>
<complex fragment> <arithmetic operator> equal <complex fragment>

- return or continue statements (c version)
return
return <complex fragment>
continue

- return or continue statements (py version)
return
return <complex fragment>
return parameter <complex fragment> parameter <complex fragment>
continue

- comment
comment "what you want to say" end comment

- calling a function
call function <function name>
call function <function name> parameter ... parameter ...

- If, Else if, Else
begin if <condition> 
    <statements - e.g. assign statements...>
else if <condition> 
    <statements - e.g. assign statements...>
else 
    <statements - e.g. assign statements...>

- while, do while loop
while <condition> 
    <statements - e.g. assign statements...>
do while <condition> 
    <statements - e.g. assign statements...>

- switch case
begin switch <var name>
case <literal> 
    <statements  - e.g. assign statements...>

- for loop (c version)
begin loop condition <statement e.g. i equals zero> condition <condition> condition <postfix e.g. i plus plus>

- for loop (py version)
begin loop parameter <var name> in <var name>
begin loop parameter <var name> parameter <var name> in <var name> * parameter can be said multiple times

- struct (for c only)
create structure <struct name> 
    <declare statements>

- create function (c version)
create function <function name> with return type <var type> begin
create function <function name> with return type <var type> parameter <var type> <var name> begin
create function <function name> with return type <var type> parameter <var type> array <var name> begin
create function <function name> with return type <var type> parameter <var type> array dimension <number> <var name> begin

- create function (py version)
create function <function name> parameter <var name> begin
create function <function name> parameter <var name> parameter <var name> begin

- create class (py version)
create class <class name>
create class <class name> with parent <parent name>

- try, catch, else, finally (py version)
begin try
    <statements  - e.g. assign statements...>  * note that catch is auto done for you
else
    <statements  - e.g. assign statements...>
finally
    <statements  - e.g. assign statements...>

- <literal>
<integer> - for number literal
string "what you want to say" end string
character "a"

- <complex fragment> - basically a never ending list of stuff
<var name / literal / <call function> / <array referencing>>

- <call function>
call function <function name> end function
call function <function name> parameter <fragment> end function
call function <function name> parameter <fragment> parameter <fragment> end function

 - <array referencing>
<var name> array index <literal / complex fragment>

* <complex fragment> can have "." as well
<complex fragment> symbol point <complex fragment>



todo:

unsigned and signed for c

add testing for pointers

error when stay from the start

the way replace is done is wrong. do it in parse statement

plus plus i in for loops and statements in general

stay and release messed up. for blocks


struct throws an error when no #create is there
it also throws an error when #string is inside



